{"version":3,"file":"index.js","mappings":";;;;;;;;;;AAAA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;;;AAGA;;AAIA;;;AAGA;AAhIA;AAuIA;AACA","sources":["webpack://test/./dist/index.js"],"sourcesContent":["function runCode(){\n              // components/HotComponent/HotComponent.js\n  \n            \n            var Page = function(page){\n              return page\n            }\n          return Page({\n            \n            onLoad: function (options) {\n              options = this.options;\n              this.setdata({})\n            },\n            \n            parseTag(tag) {\n              let res = {\n                  type1: \"tag\",\n                  name: \"\",\n                  voidElement: false,\n                  // attrs: {},\n                  children: [],\n              };\n              let tagMatch = tag.match(/<\\/?([^\\s]+?)[/\\s>]/);\n              if (tagMatch) {\n                  // 标签名称为正则匹配的第2项\n                  res.type1 = tagMatch[1];\n                  if (tag.charAt(tag.length - 2) === \"/\") {\n                      // 判断tag字符串倒数第二项是不是 / 设置为空标签。 例子：<img/>\n                      res.voidElement = true;\n                  }\n              }\n              // 匹配所有的标签正则\n              let classList = tag.match(/\\s([^'\"/\\s><]+?)\\s*?=\\s*?(\".*?\"|'.*?')/g);\n            \n              if (classList) {\n                let style = ''\n                  for (let i = 0; i < classList.length; i++) {\n                      // 去空格再以= 分隔字符串  得到['属性名称','属性值']\n             \n                      let c = classList[i].split(\"=\");\n                      // c[1] = c[1].replace(/\\s*/g, \"\")\n                      c[0] = c[0].replace(/\\s*/g, \"\")\n                      // 循环设置属性\n                      var lengthc = 2\n                      for(lengthc; lengthc < c.length ; lengthc++){\n                        c[1] += \"=\" + c[lengthc]\n                      }\n                      let p = c[1].substring(1, c[1].length - 1)\n                      try{\n                        p = JSON.parse(c[1].substring(1, c[1].length - 1))\n                      }catch(e){\n                       \n                      }\n            \n                      if (c[1]) {\n                        if(c[0] === 'style'){\n                          style = p + style\n                          res[c[0]] = style\n                        }else{\n                          res[c[0]] = p\n                        }\n                \n                      };\n            \n                  }\n              }\n              return res;\n            },\n            \n            parse(html) {\n              var that = this;\n              let result = [];\n              let current;\n              let level = -1;\n              let arr = [];\n              let tagRE = /<[a-zA-Z\\-\\!\\/](?:\"[^\"]*\"['\"]*|'[^']*'['\"]*|[^'\">])*>/g;\n              html.replace(tagRE, function (tag, index) {\n                  // 判断第二个字符是不是'/'来判断是否open\n                  let isOpen = tag.charAt(1) !== \"/\";\n                  // 获取标签末尾的索引\n                  let start = index + tag.length;\n                  // 标签之前的文本信息\n                  let text = html.slice(start, html.indexOf(\"<\", start));\n            \n                  let parent;\n                  if (isOpen) {\n                      level++;\n                      // 设置标签属性\n                      current = that.parseTag(tag);\n                      // 判断是否为文本信息，是就push一个text children  不等于'  '\n                      if (!current.voidElement && text.trim()) {\n                          current[\"text\"] = text\n                      }\n                      // 如果我们是根用户，则推送新的基本节点\n                      if (level === 0) {\n                          result.push(current);\n                      }\n                      // 判断有没有上层，有就push当前标签\n                      parent = arr[level - 1];\n                      if (parent) {\n                          parent.children.push(current);\n                      }\n                      // console.log(current)\n                      arr[level] = current;\n                  }\n                  // 如果不是开标签，或者是空元素：</div><img>\n                  if (!isOpen || current.voidElement) {\n                      // level--\n                      level--;\n                  }\n              });\n              // console.log(result)\n              return result;\n            \n            },\n          setdata: function setdata(dictData) {\n            \n            for(var i in dictData){\n              this.data[i] = dictData[i]\n            }\n            var html = `<view  ${this.data.dark === 'dark' ? 'style=\"    background-color: #f1eded;    /* filter: invert(100%) !important; */  \"' : ''} class=\"pic\" bindtap=\"ShowContent\" style=\"background-color: rgb(255, 255, 255); border-radius: 15rpx; margin-bottom: 30rpx; overflow: hidden; width: 338rpx;\">  <image style=\"Show_Image\" lazy-load src=\"${typeof item1.Cover === \"object\" ? JSON.stringify( item1.Cover) : item1.Cover}\" mode=\"aspectFill\" style=\"background-color: #ebebebd8; border-radius: 15rpx; height: ${typeof item1.ShowHeight === \"object\" ? JSON.stringify( item1.ShowHeight) : item1.ShowHeight>500?500+\"rpx\":typeof item1.ShowHeight === \"object\" ? JSON.stringify( item1.ShowHeight) : item1.ShowHeight+\"rpx\"}; width: 338rpx;\" binderror=\"binderrorimg\" bindload=\"onLazyLoad\"></image>  <view>    <span  ${this.data.dark === 'dark' ? 'style=\"    color: #fff;    filter: invert(100%) !important;  \"' : ''} class=\"pic_Title\" style=\"-webkit-box-orient: vertical; -webkit-line-clamp: 2; color: rgb(0, 0, 0); display: -webkit-box; font-family: 'Arial','Microsoft YaHei','黑体','宋体',sans-serif; font-size: 28rpx; letter-spacing: 1rpx; line-height: 35rpx; overflow: hidden; padding: 10rpx 21rpx 0rpx 21rpx; text-overflow: ellipsis; word-break: break-all;\">      <text>${typeof item1.Title === \"object\" ? JSON.stringify( item1.Title) : item1.Title||typeof item1.Text === \"object\" ? JSON.stringify( item1.Text) : item1.Text}</text>    </span>    <image src=\"${typeof item1.iconUrl === \"object\" ? JSON.stringify( item1.iconUrl) : item1.iconUrl}\" class=\"text_user\" style=\"border-radius: 50rpx; height: 35rpx; margin: 15rpx 21rpx; width: 35rpx;\"></image>    <span class=\"text_username\" style=\"bottom: 22rpx; color: rgba(128,128,128,0.8); font-size: 20rpx; position: relative; right: 10rpx;\">${typeof item1.nickName === \"object\" ? JSON.stringify( item1.nickName) : item1.nickName}</span>    <div class=\"comment\" style=\"bottom: 13rpx; height: 20rpx; left: 240rpx; position: sticky; width: 20rpx;\">      <div style=\"margin-right:6px;\">               <span class=\"commentNum\" style=\"bottom: 8rpx; color: rgba(0,0,0,0.4); font-size: 22rpx; left: 2rpx; padding-top: 2rpx; position: relative;\">${typeof item1.Star_User === \"object\" ? JSON.stringify( item1.Star_User) : item1.Star_User?typeof item1.Star_User.length === \"object\" ? JSON.stringify( item1.Star_User.length) : item1.Star_User.length:0}</span>      </div>      <div style=\"margin-right:6px;\">        <image src=\"../../../../../../images/comment.png\" class=\"commentImg\" style=\"height: 32rpx; width: 32rpx;\"></image>        <span class=\"commentNum\" style=\"bottom: 8rpx; color: rgba(0,0,0,0.4); font-size: 22rpx; left: 2rpx; padding-top: 2rpx; position: relative;\">${typeof item1.CommentList === \"object\" ? JSON.stringify( item1.CommentList) : item1.CommentList?typeof item1.CommentList.length === \"object\" ? JSON.stringify( item1.CommentList.length) : item1.CommentList.length:0}</span>      </div>    </div>  </view></view>`\n            this.setData({html : this.parse(html)});\n          },\n            \n\n  /**\n   * 组件的初始数据\n   */\n  data: {\n\n  },\n\n  /**\n   * 组件的方法列表\n   */\n  methods: {\n\n  }\n})\n\n      \n      \n        }\n            window.exports = runCode;\n        \n            "],"names":[],"sourceRoot":""}
